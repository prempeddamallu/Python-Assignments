{
    "procedure_name": "ManageEmployeeAndDepartment",
    "parameters": [
        "CREATE OR",
        "REPLACE PROCEDURE",
        "EmployeeID INT",
        "FirstName STRING DEFAULT NULL",
        "LastName STRING DEFAULT NULL",
        "Salary DECIMAL(10, 2) DEFAULT NULL",
        "DepartmentID INT DEFAULT NULL",
        "NewEmployeeID INT DEFAULT NULL",
        "NewFirstName STRING DEFAULT NULL",
        "NewLastName STRING DEFAULT NULL",
        "NewSalary DECIMAL(10, 2) DEFAULT NULL",
        "NewDepartmentID INT DEFAULT NULL",
        "DepartmentName STRING DEFAULT NULL",
        "RETURNS STRING",
        "LANGUAGE JAVASCRIPT",
        "EXECUTE AS",
        "CALLER\nAS",
        "var result",
        "CREATE tables",
        "if not",
        "exist\n    var",
        "CREATE TABLE",
        "IF NOT",
        "EXISTS Employee",
        "EmployeeID INT",
        "PRIMARY KEY",
        "FirstName STRING",
        "LastName STRING",
        "Salary DECIMAL(10, 2)",
        "var createDepartmentTable",
        "CREATE TABLE",
        "IF NOT",
        "EXISTS Department",
        "DepartmentID INT",
        "PRIMARY KEY",
        "DepartmentName STRING",
        "var createEmployeeDepartmentTable",
        "CREATE TABLE",
        "IF NOT",
        "EXISTS EmployeeDepartment",
        "EmployeeID INT",
        "DepartmentID INT",
        "PRIMARY KEY",
        "FOREIGN KEY",
        "REFERENCES Employee(EmployeeID)",
        "FOREIGN KEY",
        "REFERENCES Department(DepartmentID)",
        "Tables created",
        "or already",
        "INSERT with",
        "Insert into",
        "EmployeeDepartment from",
        "Employee and",
        "var insertEmployeeDepartmentStmt",
        "INSERT INTO",
        "SELECT e",
        "DepartmentID\n                                            FROM",
        "Employee e",
        "JOIN Department",
        "d ON",
        "WHERE e",
        "Record inserted",
        "into EmployeeDepartment",
        "with JOIN",
        "UPDATE with",
        "Update Employee",
        "s salary",
        "based on",
        "var updateStmt",
        "UPDATE Employee",
        "e\n                          SET",
        "FROM Department",
        "d\n                          JOIN",
        "EmployeeDepartment ed",
        "ON ed",
        "DepartmentID\n                          WHERE",
        "EmployeeID\n                          AND",
        "AND d",
        "Employee salary",
        "updated with",
        "DELETE without",
        "JOIN\n    if",
        "var deleteStmt",
        "DELETE FROM",
        "Employee WHERE",
        "Employee record",
        "MERGE EmployeeDepartment",
        "using a",
        "JOIN\n    if",
        "var mergeEmployeeDepartmentStmt",
        "MERGE INTO",
        "EmployeeDepartment AS",
        "target\n                                           USING",
        "AS EmployeeID",
        "AS DepartmentID",
        "AS source",
        "EmployeeID AND",
        "WHEN MATCHED",
        "THEN\n                                               UPDATE",
        "SET DepartmentID",
        "DepartmentID\n                                           WHEN",
        "NOT MATCHED",
        "THEN\n                                               INSERT",
        "EmployeeDepartment record",
        "return result"
    ],
    "sql_statements": [
        "CREATE tables if not exist\n    var createEmployeeTable = `CREATE TABLE IF NOT EXISTS Employee (\n        EmployeeID INT PRIMARY KEY,\n        FirstName STRING,\n        LastName STRING,\n        Salary DECIMAL(10, 2)\n    )`;\n    snowflake.execute({sqlText: createEmployeeTable});",
        "CREATE TABLE IF NOT EXISTS Department (\n        DepartmentID INT PRIMARY KEY,\n        DepartmentName STRING\n    )`;\n    snowflake.execute({sqlText: createDepartmentTable});",
        "CREATE TABLE IF NOT EXISTS EmployeeDepartment (\n        EmployeeID INT,\n        DepartmentID INT,\n        PRIMARY KEY (EmployeeID, DepartmentID),\n        FOREIGN KEY (EmployeeID) REFERENCES Employee(EmployeeID),\n        FOREIGN KEY (DepartmentID) REFERENCES Department(DepartmentID)\n    )`;\n    snowflake.execute({sqlText: createEmployeeDepartmentTable});",
        "Insert into EmployeeDepartment from Employee and Department)\n    if (NewEmployeeID !== null && NewDepartmentID !== null) {\n        var insertEmployeeDepartmentStmt = `INSERT INTO EmployeeDepartment (EmployeeID, DepartmentID)\n                                            SELECT e.EmployeeID, d.DepartmentID\n                                            FROM Employee e\n                                            JOIN Department d ON d.DepartmentID = ${NewDepartmentID}\n                                            WHERE e.EmployeeID = ${NewEmployeeID}`;",
        "UPDATE with JOIN (Update Employee's salary based on department)\n    if (EmployeeID !== null && DepartmentID !== null && Salary !== null) {\n        var updateStmt = `UPDATE Employee e\n                          SET e.Salary = ${Salary}\n                          FROM Department d\n                          JOIN EmployeeDepartment ed ON ed.DepartmentID = d.DepartmentID\n                          WHERE e.EmployeeID = ed.EmployeeID\n                          AND e.EmployeeID = ${EmployeeID}\n                          AND d.DepartmentID = ${DepartmentID}`;",
        "UPDATE SET DepartmentID = source.DepartmentID\n                                           WHEN NOT MATCHED THEN\n                                               INSERT (EmployeeID, DepartmentID)\n                                               VALUES (source.EmployeeID, source.DepartmentID)`;",
        "DELETE FROM Employee WHERE EmployeeID = ${EmployeeID}`;",
        "MERGE INTO EmployeeDepartment AS target\n                                           USING (SELECT ${EmployeeID} AS EmployeeID, ${NewDepartmentID} AS DepartmentID) AS source\n                                           ON (target.EmployeeID = source.EmployeeID AND target.DepartmentID = source.DepartmentID)\n                                           WHEN MATCHED THEN\n                                               UPDATE SET DepartmentID = source.DepartmentID\n                                           WHEN NOT MATCHED THEN\n                                               INSERT (EmployeeID, DepartmentID)\n                                               VALUES (source.EmployeeID, source.DepartmentID)`;"
    ]
}